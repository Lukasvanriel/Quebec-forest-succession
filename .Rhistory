#### Load packages ####
library(tidyverse)
library(sf)
#### Read in raw data ####
setwd(dirname(getActiveDocumentContext()$path))
library("rstudioapi")
#### Read in raw data ####
setwd(dirname(getActiveDocumentContext()$path))
library(rstudioapi)
library(sf)
library(rstudioapi)
#### Load packages ####
library(tidyverse)
library(sf)
library(rstudioapi)
#### Read in raw data ####
setwd(dirname(getActiveDocumentContext()$path))
data_raw1 <- sf::st_read("../../Raw-Data/TES_PRG_1_DV.gdb.zip") |>
st_drop_geometry()
data_raw2 <- sf::st_read("../../Raw-Data/TES_PRG_2_DV.gdb.zip") |>
st_drop_geometry()
data_raw3 <- sf::st_read("../../Raw-Data/TES_PRG_3_DV.gdb.zip") |>
st_drop_geometry()
data_raw4 <- sf::st_read("../../Raw-Data/TES_PRG_4_DV.gdb.zip") |>
st_drop_geometry()
data_raw5 <- sf::st_read("../../Raw-Data/TES_PRG_5_V0.gdb.zip") |>
st_drop_geometry()
data1 <- data_raw1
w
w
data2 <- data_raw2
data3 <- data_raw3
data4 <- data_raw4
data5 <- data_raw5
rm(data_raw*)
rm(data_raw1)
rm(data_raw1, data_raw2, data_raw3, data_raw4, data_raw5)
#### Clean data ####
#Fix problem of swapped longitude and latitude values
data1[data1$LONGI > 0, c("LATIT", "LONGI")] <-  data1[data1$LONGI > 0, c("LONGI", "LATIT")]
data1
data_raw1 <- data1
data_raw1 <- data1
data_raw1 <- data1
data_raw2 <- data2
data_raw3 <- data3
data_raw4 <- data4
data_raw5 <- data5
#### Clean data ####
#Drop rows without forest type attribution
data1 <- data_raw1 |>
filter(! is.na(data_raw1$GR_ESS))
data2 <- data_raw2 |>
filter(! is.na(data_raw2$GR_ESS))
data3 <- data_raw3 |>
filter(! is.na(data_raw3$GR_ESS))
data4 <- data_raw4 |>
filter(! is.na(data_raw4$GR_ESS))
data5 <- data_raw5 |>
filter(! is.na(data_raw5$GR_ESS))
data5
plot(data2$LONGI, data2$LATIT)
rm(data_raw1, data_raw2, data_raw3, data_raw4, data_raw5)
#Fix problem of swapped longitude and latitude values
data1[data1$LONGI > 0, c("LATIT", "LONGI")] <-  data1[data1$LONGI > 0, c("LONGI", "LATIT")]
data2[data2$LONGI > 0, c("LATIT", "LONGI")] <-  data2[data2$LONGI > 0, c("LONGI", "LATIT")]
data3[data3$LONGI > 0, c("LATIT", "LONGI")] <-  data3[data3$LONGI > 0, c("LONGI", "LATIT")]
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
data5[data5$LONGI > 0, c("LATIT", "LONGI")] <-  data5[data5$LONGI > 0, c("LONGI", "LATIT")]
data5 <- data_raw5 |>
filter(! is.na(data_raw5$GR_ESS))
data_raw5 <- sf::st_read("../../Raw-Data/TES_PRG_5_V0.gdb.zip") |>
st_drop_geometry()
data5 <- data_raw5 |>
filter(! is.na(data_raw5$GR_ESS))
data5[data5$LONGI > 0, c("LATIT", "LONGI")] <-  data5[data5$LONGI > 0, c("LONGI", "LATIT")]
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
rm(data_raw1, data_raw2, data_raw3, data_raw4, data_raw5)
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
#Fix problem of swapped longitude and latitude values
data1[data1$LONGI > 0, c("LATIT", "LONGI")] <-  data1[data1$LONGI > 0, c("LONGI", "LATIT")]
data2[data2$LONGI > 0, c("LATIT", "LONGI")] <-  data2[data2$LONGI > 0, c("LONGI", "LATIT")]
data3[data3$LONGI > 0, c("LATIT", "LONGI")] <-  data3[data3$LONGI > 0, c("LONGI", "LATIT")]
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
data5[data5$LONGI > 0, c("LATIT", "LONGI")] <-  data5[data5$LONGI > 0, c("LONGI", "LATIT")]
plot(data4$LONGI, data4$LATIT)
data4 <- data_raw4 |>
filter(! is.na(data_raw4$GR_ESS))
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
data4 <- data_raw4 |>
filter(! is.na(data4$GR_ESS))
data4 <- data4 |>
filter(! is.na(data4$GR_ESS))
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
data4 <- data_raw4 |>
filter(! is.na(data_raw4$GR_ESS))
#Fix problem of swapped longitude and latitude values
data1[data1$LONGI > 0, c("LATIT", "LONGI")] <-  data1[data1$LONGI > 0, c("LONGI", "LATIT")]
data2[data2$LONGI > 0, c("LATIT", "LONGI")] <-  data2[data2$LONGI > 0, c("LONGI", "LATIT")]
data3[data3$LONGI > 0, c("LATIT", "LONGI")] <-  data3[data3$LONGI > 0, c("LONGI", "LATIT")]
data5[data5$LONGI > 0, c("LATIT", "LONGI")] <-  data5[data5$LONGI > 0, c("LONGI", "LATIT")]
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
data_raw4 <- sf::st_read("../../Raw-Data/TES_PRG_4_DV.gdb.zip") |>
st_drop_geometry()
data4 <- data_raw4 |>
filter(! is.na(data_raw4$GR_ESS))
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
#Fix problem of swapped longitude and latitude values
data1[data1$LONGI > 0, c("LATIT", "LONGI")] <-  data1[data1$LONGI > 0, c("LONGI", "LATIT")]
data2[data2$LONGI > 0, c("LATIT", "LONGI")] <-  data2[data2$LONGI > 0, c("LONGI", "LATIT")]
data3[data3$LONGI > 0, c("LATIT", "LONGI")] <-  data3[data3$LONGI > 0, c("LONGI", "LATIT")]
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
data5[data5$LONGI > 0, c("LATIT", "LONGI")] <-  data5[data5$LONGI > 0, c("LONGI", "LATIT")]
rm(data_raw1, data_raw2, data_raw3, data_raw4, data_raw5)
data_raw1 <- data1
data_raw1 <- data1
data_raw2 <- data2
data_raw3 <- data3
data_raw4 <- data4
data_raw5 <- data5
#### Clean data ####
#Drop rows without forest type attribution
data1 <- data_raw1 |>
filter(! is.na(data_raw1$LATIT))
data2 <- data_raw2 |>
filter(! is.na(data_raw2$LATIT))
data3 <- data_raw3 |>
filter(! is.na(data_raw3$LATIT))
data4 <- data_raw4 |>
filter(! is.na(data_raw4$LATIT))
data5 <- data_raw5 |>
filter(! is.na(data_raw5$LATIT))
data_raw1 <- data1
rm(data_raw1, data_raw2, data_raw3, data_raw4, data_raw5)
#Fix problem of swapped longitude and latitude values
data1[data1$LONGI > 0, c("LATIT", "LONGI")] <-  data1[data1$LONGI > 0, c("LONGI", "LATIT")]
data2[data2$LONGI > 0, c("LATIT", "LONGI")] <-  data2[data2$LONGI > 0, c("LONGI", "LATIT")]
data3[data3$LONGI > 0, c("LATIT", "LONGI")] <-  data3[data3$LONGI > 0, c("LONGI", "LATIT")]
data4[data4$LONGI > 0, c("LATIT", "LONGI")] <-  data4[data4$LONGI > 0, c("LONGI", "LATIT")]
data5[data5$LONGI > 0, c("LATIT", "LONGI")] <-  data5[data5$LONGI > 0, c("LONGI", "LATIT")]
#### Filter data ####
sum(is.na(data1$GR_ESS))
#### Filter data ####
sum(is.na(data2$GR_ESS))
#### Filter data ####
sum(is.na(data3$GR_ESS))
#### Filter data ####
sum(is.na(data4$GR_ESS))
#### Filter data ####
sum(is.na(data5$GR_ESS))
data5$GR_ESS
#### Filter data for Boreal-Temperate ecotone ####
filter_bte <- function(raw.data, strict) {
if (strict) {
domains <- c("4est", "4ouest")
} else {domains <- c("3est", "3ouest", "4est", "4ouest", "5est", "5ouest")}
raw.data |> filter(SDOM_ECO %in% domains)
}
data1_sp
#### Filter data for Boreal-Temperate ecotone ####
filter_bte <- function(raw.data, strict) {
if (strict) {
domains <- c("4est", "4ouest")
} else {domains <- c("3est", "3ouest", "4est", "4ouest", "5est", "5ouest")}
raw.data |> filter(SDOM_ECO %in% domains)
}
bte1 <- filter_bte(data1_sp, strict=TRUE)
bte1 <- filter_bte(data1, strict=TRUE)
bte1 <- filter_bte(data1, strict=TRUE)
bte2 <- filter_bte(data2, strict=TRUE)
bte3 <- filter_bte(data3, strict=TRUE)
bte4 <- filter_bte(data4, strict=TRUE)
bte5 <- filter_bte(data5, strict=TRUE)
bte1_noP <- bte1
#### Filter out plantations ####
#TODO
bte1_noP <- bte1
bte2_noP <- bte2
bte3_noP <- bte3
bte4_noP <- bte4
bte5_noP <- bte5
#### Write out resulting datasets ####
write.csv(bte1_noP, "../../Data/bte1_noP.csv")
#### Write out resulting datasets ####
write.csv(bte1_noP, "../../Data/BTE/bte1_noP.csv")
#### Write out resulting datasets ####
write.csv(bte1_noP, "../../Data/BTE/bte1_noP.csv")
write.csv(bte2_noP, "../../Data/BTE/bte2_noP.csv")
write.csv(bte3_noP, "../../Data/BTE/bte3_noP.csv")
write.csv(bte4_noP, "../../Data/BTE/bte4_noP.csv")
write.csv(bte5_noP, "../../Data/BTE/bte5_noP.csv")
bte1_noP1 <- read.csv("/Users/lukas/Desktop/RProjects/Markov-Succession/Data/SIFORT/BTE data/bte1_noP.csv")[,-1]
bte1_noP1 <- read.csv("/Users/lukas/Desktop/RProjects/Markov-Succession/Data/SIFORT/BTE data/bte1_noP.csv")
bte1_noP1
bte1_noP1 <- read.table("/Users/lukas/Desktop/RProjects/Markov-Succession/Data/SIFORT/BTE data/bte1_noP.csv")
bte1_noP1 <- read.csv("/Users/lukas/Desktop/RProjects/Markov-Succession/Data/SIFORT/BTE data/bte1_noP.csv")
bte1_noP1 <- read.csv("/Users/lukas/Desktop/RProjects/Markov-Succession/Data/SIFORT/BTE data/bte1_noP.csv")[,-1]
bte1_noP1 == bte1_noP
bte1_noP1 == bte1_noP
bte1_noP1
dim(bte1_noP1)
dim(bte1_noP)
bte1_noP1
bte1_noP1 <- read.csv("/Users/lukas/Desktop/RProjects/Markov-Succession/Data/SIFORT/BTE data/bte1_noP.csv")[,-1]
names(bte1_noP)
names(bte1_noP1)
bte1_noP
names(bte1_noP)
names(bte1_noP1)
source("~/Desktop/RProjects/Quebec-Forest-Succession/R-scripts/01-Data/Load-SIFORT.R", echo=TRUE)
bte1_noP1 <- read.csv("/Users/lukas/Desktop/RProjects/Markov-Succession/Data/SIFORT/BTE data/bte1_noP.csv")[,-1]
bte1_noP1 <- read.csv("../../Data/BTE/bte1_noP.csv")[,-1]
bte2_noP <- read.csv("../../Data/BTE/bte2_noP.csv")[,-1]
bte2_noP <- read.csv("../../Data/BTE/bte2_noP.csv")[,-1]
bte3_noP <- read.csv("../../Data/BTE/bte3_noP.csv")[,-1]
bte4_noP <- read.csv("../../Data/BTE/bte4_noP.csv")[,-1]
bte5_noP <- read.csv("../../Data/BTE/bte5_noP.csv")[,-1]
bte1_noP1 == bte1_noP
bte1_noP
bte1_noP1
bte1_noP1 == bte1_noP
bte1_noP1 <- read.csv("../../Data/BTE/bte1_noP.csv")[,-1]
bte1_noP1
bte1_noP1[1,]
bte1_noP1[1,] == bte1_noP[1,]
bte1_noP1[1,]
bte1_noP[1,]
bte1_noP1 == bte1_noP
bte1_noP1[1:3,] == bte1_noP[1:3,]
bte1_noP1
bte1_noP1[1,]
bte1_noP1[1:3,] == bte1_noP[1:3,]
bte1_noP[1,]
bte1_noP1[1,]
bte1_noP1[1,"SUPR"]
bte1_noP1[1, "SUPR"]
bte1_noP1[1, "SUPRF"]
bte1_noP[1, "SUPRF"]
bte1_noP1[1, "SUPRF"] == bte1_noP[1, "SUPRF"]
class(bte1_noP[1, "SUPRF"])
class(bte1_noP1[1, "SUPRF"])
bte1_noP1[1, "SUPRF"]
bte1_noP[1, "SUPRF"]
bte1_noP <- read.csv("../../Data/BTE/bte1_noP.csv")[,-1]
rm(bte1_noP1)
rm(bte1, bte2, bte3, bte4, bte5)
rm(data1, data2, data3, data4, data5)
### Combine data ####
bte_all <- rbind(bte1_noP[,c("GR_ESS", "Description")], bte2_noP[,c("GR_ESS", "Description")],
bte3_noP[,c("GR_ESS", "Description")], bte4_noP[,c("GR_ESS", "Description")],
bte5_noP[,c("GR_ESS", "Description")])
### Combine data ####
bte_all <- rbind(bte1_noP, bte2_noP, bte3_noP, bte4_noP, bte5_noP)
bte5_noP <- read.csv("../../Data/BTE/bte5_noP.csv")[,-1]
### Only keep columns that are present in bte5 ###
bte1_noP <- bte1_noP %>%
select(intersect(colnames(bte1_noP) , colnames(bte5_noP)))
bte1_noP <- read.csv("../../Data/BTE/bte1_noP.csv")[,-1]
### Only keep columns that are present in bte5 ###
bte1_noP2 <- bte1_noP %>%
select(intersect(colnames(bte1_noP) , colnames(bte5_noP)))
### Only keep columns that are present in bte5 ###
bte1_noP <- bte1_noP %>%
select(intersect(colnames(bte1_noP) , colnames(bte5_noP)))
bte2_noP <- bte2_noP %>%
select(intersect(colnames(bte2_noP) , colnames(bte5_noP)))
bte3_noP <- bte3_noP %>%
select(intersect(colnames(bte3_noP) , colnames(bte5_noP)))
bte4_noP <- bte4_noP %>%
select(intersect(colnames(bte4_noP) , colnames(bte5_noP)))
bte1_noP <- read.csv("../../Data/BTE/bte1_noP.csv")[,-1]
rm(bte1_noP2)
### Combine data ####
bte_all <- rbind(bte1_noP, bte2_noP, bte3_noP, bte4_noP, bte5_noP)
### Only keep columns that are present in bte5 ###
bte1_noP <- bte1_noP %>%
select(intersect(colnames(bte1_noP) , colnames(bte5_noP)))
### Combine data ####
bte_all <- rbind(bte1_noP, bte2_noP, bte3_noP, bte4_noP, bte5_noP)
most_prev <- bte_all |>
count(GR_ESS) |> arrange(desc(n)) |> head(10)
most_prev
most_prev <- bte_all |>
count(GR_ESS) |> arrange(desc(n)) |> head(100)
most_prev
